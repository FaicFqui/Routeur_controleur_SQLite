const db = require('./sqlhandler'); // Importer la base de données SQLite

// Obtenir tous les utilisateurs
exports.getAllUsers = (req, res) => {
    db.all('SELECT * FROM users', [], (err, rows) => {
        if (err) {
            return res.status(500).json({ message: 'Erreur lors de la récupération des utilisateurs' });
        }
        res.status(200).json(rows);
    });
};

// Obtenir un utilisateur spécifique par ID
exports.getUserById = (req, res) => {
    const { id } = req.params;
    db.get('SELECT * FROM users WHERE id = ?', [id], (err, row) => {
        if (err) {
            return res.status(500).json({ message: 'Erreur lors de la récupération de l\'utilisateur' });
        }
        if (!row) {
            return res.status(404).json({ message: 'Utilisateur non trouvé' });
        }
        res.status(200).json(row);
    });
};

// Créer un nouvel utilisateur
exports.createUser = (req, res) => {
    const { name, email } = req.body;

    // Validation des données
    if (!name || !email) {
        return res.status(400).json({ message: 'Le nom et l\'email sont requis' });
    }

    // Vérifier si l'email existe déjà
    db.get('SELECT * FROM users WHERE email = ?', [email], (err, row) => {
        if (err) {
            return res.status(500).json({ message: 'Erreur lors de la vérification de l\'email' });
        }
        if (row) {
            return res.status(400).json({ message: 'Cet email est déjà utilisé' });
        }

        // Insérer l'utilisateur dans la base de données
        db.run('INSERT INTO users (name, email) VALUES (?, ?)', [name, email], function (err) {
            if (err) {
                return res.status(500).json({ message: 'Erreur lors de la création de l\'utilisateur' });
            }
            res.status(201).json({ id: this.lastID, name, email });
        });
    });
};

// Mise à jour d'un utilisateur par ID
exports.updateUser = (req, res) => {
    const { id } = req.params;
    const { name, email } = req.body;

    // Validation des données
    if (!name || !email) {
        return res.status(400).json({ message: 'Le nom et l\'email sont requis' });
    }

    db.get('SELECT * FROM users WHERE id = ?', [id], (err, row) => {
        if (err) {
            return res.status(500).json({ message: 'Erreur lors de la récupération de l\'utilisateur' });
        }
        if (!row) {
            return res.status(404).json({ message: 'Utilisateur non trouvé' });
        }

        // Mettre à jour l'utilisateur
        db.run('UPDATE users SET name = ?, email = ? WHERE id = ?', [name, email, id], function (err) {
            if (err) {
                return res.status(500).json({ message: 'Erreur lors de la mise à jour de l\'utilisateur' });
            }
            res.status(200).json({ id, name, email });
        });
    });
};

// Supprimer un utilisateur par ID
exports.deleteUser = (req, res) => {
    const { id } = req.params;
    db.get('SELECT * FROM users WHERE id = ?', [id], (err, row) => {
        if (err) {
            return res.status(500).json({ message: 'Erreur lors de la récupération de l\'utilisateur' });
        }
        if (!row) {
            return res.status(404).json({ message: 'Utilisateur non trouvé' });
        }

        // Supprimer l'utilisateur
        db.run('DELETE FROM users WHERE id = ?', [id], function (err) {
            if (err) {
                return res.status(500).json({ message: 'Erreur lors de la suppression de l\'utilisateur' });
            }
            res.status(200).json({ message: 'Utilisateur supprimé avec succès' });
        });
    });
};
